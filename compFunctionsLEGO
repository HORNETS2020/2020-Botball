#include <kipr/wombat.h>
void gyroCali(); //calibrate gyro, *INCLUDED IN ALL GYRO FUNCTIONS*

void gyroDrive(int speed, double time); //Drive function
void gyroBack(double time); //Drive function for reverse
void gyroRight(int targetTheta);  //Drive Right targetTheta degrees
void gyroLeft(int targetTheta);  // Drive Left targetTheta degrees
void lineFollow(int colorvalue, double SeGunDos);  // Robot moves when IR reflectance detects %colorvalue%, and corrects itself if not detecting %colorvalue%

double avg = 0;
double bias = 0;

void gyroCali(){
    int i = 0;
    avg = 0;     
    msleep(1000);
    while (i < 50){
        avg += gyro_z();
        msleep(1);
        i++;
    }
    bias = avg / 50.0;
}


void gyroDrive(int speed, double time){
    double startTime = seconds();
    double theta = 0;
    gyroCali();
    while (seconds() - startTime < time)
    {
        if(theta < 1000 && theta > -1000){
            mav(0, speed);
            mav(2, speed);
        }
        else if(theta < 1000){
            mav(0, speed + 100);
            mav(2, speed - 100);
        }
        else{
            mav(0, speed - 100);
            mav(2, speed + 100);
        }
        msleep(10);
        theta += (sqrt((gyro_z() - bias)*(gyro_z() - bias))) * 10;
    }
}

void gyroBack(double time){
    double startTime = seconds();
    double theta = 0;
    double bias = avg /50.0;
    gyroCali();
    while (seconds() - startTime < time)
    {
        if(theta < 1000 && theta > -1000){
            mav(0, -900);
            mav(2, -900);
        }
        else if(theta > 1000){
            mav(0, -900 - 100);
            mav(2, -900 + 100);
        }
        else {
            mav(0, -900 + 100);
            mav(2, -900 - 100);
        }
        msleep(10);
        theta += (sqrt((gyro_z() - bias)*(gyro_z() - bias))) * 10;
    }
  
}

void gyroLeft(int targetTheta){
    double bias = avg /50.0;
    double theta = 0;
    gyroCali();
    mav(0, -1000);
    mav(2, 1000);

    while(theta < (targetTheta * 50)){
        msleep(10);
        theta += (sqrt((gyro_z() - bias)*(gyro_z() - bias))) * 10;
    }
    mav(0, 0);
    mav(2, 0);
}
  
 
void gyroRight(int targetTheta){
    double bias = avg /50.0;
    double theta = 0;
    gyroCali();
    mav(0, 1000);
    mav(2, -1000);

    while(theta < (targetTheta * 50)){
        msleep(10);
        theta += (sqrt((gyro_z() - bias)*(gyro_z() - bias))) * 10;
    }
    mav(0, 0);
    mav(2, 0);
}

void lineFollow(int colorvalue, double SeGunDos){
    double startTime = seconds();
    while (seconds() - startTime < SeGunDos){
        if(analog(1)<colorvalue){
            motor(0,30);
            motor(2,60);
        }
        else{
            motor(0,60);
            motor(2,30);
        }
    }
    ao();
}
